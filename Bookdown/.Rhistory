subset(tsdl,"Health")
subset(tsdl::tsdl,"Health")
subset(tsdl::tsdl,"Health",52)
teste <- subset(tsdl::tsdl,"Health",52)
teste
tsdl[52]
tsdl::tsdl[52]
tsdl::tsdl[[2]]
co2
plot(co2)
? co2
## devtools::install_github("FinYang/tsdl")
## https://github.com/FinYang/tsdl/tree/master/data-raw
## sarampo <- scan('https://raw.githubusercontent.com/FinYang/tsdl/master/data-raw/epi/mumps.dat',skip = 1)
## catapora <- scan('https://raw.githubusercontent.com/FinYang/tsdl/master/data-raw/epi/chicknyc.dat',skip=1)
par(mfrow=c(2,2))
plot(nottem,main='Temperatura Nottingham \n UK, 1920–1939')
plot(UKDriverDeaths, main='Acidentes fatais em estradas \n Great Britain 1969–84')
plot(mdeaths,main='Mortes por doenças pulmonares \n homens  UK 1974–1979')
plot(co2,main='Concentração de CO2 \n 1959 - 1997')
title(sub = ' fonte: Scripps Institution of Oceanography (SIO), University of California' )
## devtools::install_github("FinYang/tsdl")
## https://github.com/FinYang/tsdl/tree/master/data-raw
## sarampo <- scan('https://raw.githubusercontent.com/FinYang/tsdl/master/data-raw/epi/mumps.dat',skip = 1)
## catapora <- scan('https://raw.githubusercontent.com/FinYang/tsdl/master/data-raw/epi/chicknyc.dat',skip=1)
par(mfrow=c(2,2))
plot(nottem,main='Temperatura Nottingham \n UK, 1920–1939')
plot(UKDriverDeaths, main='Acidentes fatais em estradas \n Great Britain 1969–84')
plot(mdeaths,main='Mortes por doenças pulmonares \n homens  UK 1974–1979')
plot(co2,main='Concentração de CO2 \n 1959 - 1997')
title(sub = ' fonte: Scripps Institution of Oceanography (SIO), University of California' )
dados <- scan('https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/exemplos/caxumba.dat')
caxumba <- ts(dados,start(1928,1),frequency=12)
plot(caxumba)
plot(caxumba)
caxumba
caxumba <- ts(dados,start=c(1928,1),frequency=12)
plot(caxumba)
dados <- scan('https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/exemplos/caxumba.dat')
caxumba
plot(sunspots)
acf(sunspots)
acf(sunspots,320)
acf(sunspots,24)
Box.test(caxumba, lag=12, type="Ljung-Box")
Box.test(caxumba, lag=24, type="Ljung-Box")
max(denguecasests)
dengue_original <- read.csv("https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/dados/denguecases2.csv")
# Convertendo os dados para o formato de Séries Temporais
# A frequency=12 foi especificado pois queremos mostrar dos dados mensais
# dengue_original=read.csv("denguecases2.csv")
denguecasests <- ts(dengue_original$Dengue_Cases,start=c(2008,1),frequency=12)
plot(denguecasests, ylab="Casos de Dengue", xlab="Tempo")
acf(denguecasests, lag.max=20, main="Dados Original")
Box.test(denguecasests, lag=20, type="Ljung-Box")
acf(denguecasests, lag.max=20, main="Dados Original")
Box.test(denguecasests, lag=20, type="Ljung-Box")
Através do gráfico e do teste do ACF, é possível verificar que os a incidência de dengue é altamente correlacionada ao longo do tempo.
- Fazendo uma análise descritiva da série temporal.
```{r, echo=T, warning=FALSE, results='asis', message = FALSE, out.width = "70%", fig.align = "center"}
max(denguecasests)
min(denguecasests)
mean(denguecasests)
median(denguecasests)
summary(denguecasests)
denguecasests
denguecasests
denguecasests
options(width = 800)
denguecasests
options(width = 800)
denguecasests
cat(mean(denguecasests),'/', median(denguecasests))
# Pacotes necessarios
library(zoo)
library(quantmod)
library(DT)
# library(dplyr)
# library(magrittr)
# library(highcharter)
library(PerformanceAnalytics)
library(htmltools)
options(width = 800)
## devtools::install_github("FinYang/tsdl")
## https://github.com/FinYang/tsdl/tree/master/data-raw
## sarampo <- scan('https://raw.githubusercontent.com/FinYang/tsdl/master/data-raw/epi/mumps.dat',skip = 1)
## catapora <- scan('https://raw.githubusercontent.com/FinYang/tsdl/master/data-raw/epi/chicknyc.dat',skip=1)
par(mfrow=c(2,2))
plot(nottem,main='Temperatura Nottingham \n UK, 1920–1939')
plot(UKDriverDeaths, main='Acidentes fatais em estradas \n Great Britain 1969–84')
plot(mdeaths,main='Mortes por doenças pulmonares \n homens  UK 1974–1979')
plot(co2,main='Concentração de CO2 \n 1959 - 1997')
title(sub = ' fonte: Scripps Institution of Oceanography (SIO), University of California' )
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000)))
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
# Calcular a autocorrelação
acf = stats::acf(timeseries, na.action = na.pass, plot = FALSE, lag.max = 15)
# Gráfico da função de autocorrelação.
plot(acf, main = "", ylab = "", xlab = "Lags")
title("Função de Autocorrelação (FAC)", adj = 0.5, line = 1)
par(mfrow=c(3,1))
set.seed(456789)
plot(arima.sim(n = 100, list(order=c(2,1,0),ar = c(0.8897, -0.4858))),ylab='')
title('Não estacionaria - apresenta Tendência')
set.seed(8765543)
plot(arima.sim(n = 100, list(order=c(2,1,0),ar = c(-0.697, 0.258))),ylab='')
title('Não estacionaria - apresenta Tendência')
set.seed(123456)
plot(rnorm(100,5,.5),ylab='',type="l")
title('Estacionaria - Não apresenta Tendência')
library(ggfortify)
library(tseries)
library(forecast)
library(fpp2)
ts.plot(lynx, ylab = "Number of lynx trapped",main="Number of lynx trapped in the McKenzie river in Canada (1821-1934)")
library(ggfortify)
library(tseries)
library(forecast)
ts.plot(AirPassengers, ylab = "Passenger numbers (1000's)",main="Air Passenger numbers from 1949 to 1961")
# Uma serie temporal normalmente distribuida
serie <-  rnorm(60)
# usando a função ts para criar um objeto da classe ts
serie.ts  <- ts(serie,start = c(2012,1), frequency=12) # pode-se usar tambem  end=c(2016,12) mas basta um!
serie.ts
# gráfico da série
plot(serie.ts)
dados <- scan('https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/exemplos/caxumba.dat')
caxumba <- ts(dados,start = c(1928,1),frequency = 12)
plot(caxumba)
dengue_original <- read.csv("https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/dados/denguecases2.csv")
# library(DT)
# datatable(dengue_original)
# Convertendo os dados para o formato de Séries Temporais
# A frequency=12 foi especificado pois queremos mostrar dos dados mensais
# dengue_original=read.csv("denguecases2.csv")
denguecasests <- ts(dengue_original$Dengue_Cases,start=c(2008,1),frequency=12)
plot(denguecasests, ylab="Casos de Dengue", xlab="Tempo")
acf(denguecasests, lag.max=20, main="Dados Original")
Box.test(denguecasests, lag=20, type="Ljung-Box")
denguecasests
summary(denguecasests)
hist(denguecasests)
boxplot(denguecasests)
denguecasests2 <- window(denguecasests, start=c(2010,1),end=c(2012,12),frequency=12)
plot(denguecasests2, ylab="Casos de Dengue", xlab="Tempo")
plot(decompose(denguecasests))
plot(stl(denguecasests, s.window="periodic"))
decom_dengue <- decompose(denguecasests)
plot(decom_dengue)
Trend <- decom_dengue$trend
Seasonal <- decom_dengue$seasonal
Random <- decom_dengue$random
ts.plot(cbind(Trend, Trend * Seasonal), lty = 1:2)
# library(ggfortify)
# autoplot(decompose(denguecasests))
decom_dengue
plot(decom_dengue)
decom_dengue <- stl(denguecasests,12)
decom_dengue
decom_dengue$
? stlf
? stl
decom_dengue$time.series
decom_dengue$time.series[,1]
decom_dengue$time.series[,2]
decom_dengue$time.series[,3]
rowSums(decom_dengue$time.series)
denguecasests
decom_dengue$time.series
plot(decom_dengue$time.series[,1])
plot(decom_dengue$time.series[,2])
plot(decom_dengue$time.series[,3])
plot(decom_dengue$time.series[,1])
plot(decom_dengue$time.series[,2])
plot(decom_dengue$time.series[,2])
lines(decom_dengue$time.series[,1],col=4)
lines(decom_dengue$time.series[,3],col=2)
plot(decom_dengue$time.series[,2],ylim=c(0,400))
lines(decom_dengue$time.series[,1],col=4)
lines(decom_dengue$time.series[,3],col=2)
decom_ld <- stl(ldeaths,12)
plot(decom_ld$time.series[,2])
lines(decom_ld$time.series[,3],col=2)
lines(decom_ld$time.series[,1],col=4)
decom_ld$time.series
plot(decom_ld$time.series[,2],ylim(-400,2200))
plot(decom_ld$time.series[,2],ylim=c(-400,2200))
lines(decom_ld$time.series[,1],col=4)
lines(decom_ld$time.series[,3],col=2)
plot(scale(decom_ld$time.series[,2]),ylim=c(-500,))
plot(scale(decom_ld$time.series[,2]),ylim=c(-500,NA))
plot(scale(decom_ld$time.series[,2]),ylim=c(-500,1000))
plot(scale(decom_ld$time.series[,2]))
plot(decom_ld$time.series[,2])
mean(decom_ld)
mean(decom_ld$time.series[,2])
plot(decom_ld$time.series[,2]-2054)
lines(decom_ld$time.series[,3],col=2)
plot(decom_ld$time.series[,2]-2054,ylim=c(-500,300))
lines(decom_ld$time.series[,3],col=2)
plot(decom_ld$time.series[,2]-2054,ylim=c(-500,500))
lines(decom_ld$time.series[,3],col=2)
plot(decom_ld$time.series[,2]-2054,ylim=c(-600,600))
lines(decom_ld$time.series[,3],col=2)
lines(decom_ld$time.series[,1],col=4)
plot(decom_ld$time.series[,2]-2054,ylim=c(-600,1000))
lines(decom_ld$time.series[,3],col=2)
lines(decom_ld$time.series[,1],col=4)
acf(decom_ld$time.series[,3])
auto.arima(ldeaths)
modelo <- auto.arima(ldeaths)
predict(modelo,12)
predict(modelo)
forecast(modelo)
plot(forecast(modelo))
predict(modelo,24)
plot(forecast(modelo,24))
plot(forecast(modelo,48))
plot(forecast(modelo,480))
plot(forecast(modelo,120))
plot(forecast(modelo,12))
plot(forecast(modelo,3))
plot(forecast(modelo,12))
plot(forecast(modelo,24))
? ldeaths
library(ggfortify)
library(tseries)
library(forecast)
plot(ldeaths,main='Mortes por doenças pulmonares   UK 1974–1979')
#ts.plot(AirPassengers, ylab = "Passenger numbers (1000's)",main="Air Passenger numbers from 1949 to 1961")
monthplot(ldeaths)
boxblot(ldeaths)
boxblot(ldeaths ~cycle(ldeaths))
boxplot(ldeaths ~cycle(ldeaths))
boxplot(ldeaths ~cycle(ldeaths),name=month.abb)
boxplot(ldeaths ~cycle(ldeaths),names=month.abb)
? arima.sim
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,rand.gen = function(x) rnorm(x,30,3))))
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,rand.gen = function(x) rnorm(x,10,3))))
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) interger(rnorm(x,10,3)))))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) integer(rnorm(x,10,3)))))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) as.integer(rnorm(x,10,3)))))
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) round((rnorm(x,10,3)),2)))
lags <- Lag(timeseries, k=1:10)
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) round((rnorm(x,10,3),2)))))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) round((rnorm(x,10,3),2))))))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) round(rnorm(x,10,3),2)))))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,
rand.gen = function(x) rnorm(x,10,3)))))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000)))
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
funca <- function(x) {round(rnorm(x,30,3))}
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
funca <- function(x) {round(rnorm(x,30,3))}
set.seed(3343545)
timeseries <- zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,rand.gen = funca)))
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
funca <- function(x) {round(rnorm(x,30,3))}
set.seed(3343545)
timeseries <- round(zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,rand.gen = funca))),2)
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
funca <- function(x) {round(rnorm(x,10,1.5))}
set.seed(3343545)
timeseries <- round(zoo::as.zoo((arima.sim(list(order = c(3,0,0), ar = c(0.5,0.15,0.05)), n = 10000,rand.gen = funca))),2)
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
funca <- function(x) {round(rnorm(x,10,1.5))}
set.seed(3343545)
timeseries <- round(zoo::as.zoo((arima.sim(list(order = c(2,0,0), ar = c(0.5,0.15)), n = 10000,rand.gen = funca))),2)
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
from <-  as.Date("1974-01-01")
to <-  as.Date("1989-12-31")
days <-  seq.Date(from=from,to=to,by="days")
funca <- function(x) {round(rnorm(x,10,1.5))}
set.seed(3343545)
timeseries <- round(zoo::as.zoo((arima.sim(list(order = c(2,0,0), ar = c(0.5,0.15)), n = 1000,rand.gen = funca))),2)
lags <- Lag(timeseries, k=1:10)
final <-  round(zoo::cbind.zoo(timeseries,lags), 4)
colnames(final) <-  c("atual", "lag1", "lag2", "lag3", "lag4", "lag5",
"lag6", "lag7", "lag8", "lag9", "lag10")
DT::datatable(final[1:10,], rownames = FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets="_all")), dom = 't'))
install.packages("car")
install.packages("sm")
plot(Seatbelts)
# Utilizando trace = T, será possível verificar todo o processo de criação e teste dos modelos
modelo1 = auto.arima(denguecasests, trace = F)
install.packages("forecast")
library(forecast)
par(mfrow=c(3,2))
# Série original
plot(AirPassengers, ylab="Passageiros", main="Original")
# Lambda = 0, Logaritmica
t1 = BoxCox(AirPassengers,lambda =0 )
plot(t1, ylab="Passageiros", main="Lambda = 0, Logaritmica")
# Lambda = 0.34
t2 = BoxCox(AirPassengers,lambda =.1 )
plot(t2, ylab="Passageiros", main="Lambda = 0.34")
# Gera labda automático
lbd = BoxCox.lambda(AirPassengers)
# print(lbd)
t3 = BoxCox(AirPassengers,lambda =lbd )
plot(t3, ylab="Passageiros", main="Labda Automático")
# Diferenciacao
t4 = diff(AirPassengers)
plot(t4, ylab="Passageiros", main="Diferenciacao")
# Logaritmo
t5 = log(AirPassengers)
plot(t5, ylab="Passageiros", main="Log")
library(forecast)
ggtsdisplay(ldeaths)
modelo0 <- Arima(ldeaths,order = c(1,0,0),seasonal = c(1,1,1))
checkresiduals(modelo0)
tsdiag(modelo0)
uktemp <- read.table('https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/dados/UKtemp.tsv')
uktemp <- ts(as.vector(t(uktemp[,2:13])),start = c(1970,1),frequency = 12)
uktemp.ts <- window(uktemp,start=c(1974,1),end=c(1979,12))
fcc <- ccf(uktemp.ts,ldeaths)
#plot(fcc)
pander(cbind(fcc$lag,fcc$acf))
kable(cbind(fcc$lag,fcc$acf))
knitr::kable(cbind(fcc$lag,fcc$acf))
dt <- cbind(fcc$lag,fcc$acf)
dt %>%
kable() %>%
kable_styling()
dt <- cbind(fcc$lag,fcc$acf)
dt %>%
knitr::kable() %>%
kable_styling()
dt <- cbind(fcc$lag,fcc$acf)
dt %>%
knitr::kable() %>%
kableExtra::kable_styling()
uktemp <- read.table('https://gitlab.procc.fiocruz.br/oswaldo/eco2019/raw/master/dados/UKtemp.tsv')
uktemp <- ts(as.vector(t(uktemp[,2:13])),start = c(1970,1),frequency = 12)
uktemp.ts <- window(uktemp,start=c(1974,1),end=c(1979,12))
fcc <- ccf(uktemp.ts,ldeaths)
#plot(fcc)
predict(modelo1,n.ahead = 12)
# tilizando trace = T, será possível verificar todo o processo de criação e teste dos modelos
modelo1 <-  auto.arima(ldeaths, trace = F, allowdrift=F)
# Neste modelo, será feito uma busca maior para uma solução "mais ótimizada"
modelo2 <-  auto.arima(ldeaths, trace = F, stepwise = F, approximation = F)
modelo1
tsdiag(modelo1)
dt <- modelo1
dt %>%
knitr::kable() %>%
kableExtra::kable_styling()
knitr::kable(modelo1)
install.packages("texreg")
library(texreg)
library("texreg")
screenreg(modelo1)
pander(texreg::screenreg(modelo1))
pander(texreg::screenreg(modelo1))
# pander(texreg::screenreg(modelo1))
pandoc.table(texreg::screenreg(modelo1))
# pander(texreg::screenreg(modelo1))
pandoc.table(modelo1)
# pander(texreg::screenreg(modelo1))
pander::pandoc.table(modelo1)
# pander(texreg::screenreg(modelo1))
pandoc.table(modelo1, style = "simple")
install_github('pander', 'Rapporter')
library(devtools)
install_github('pander', 'Rapporter')
library(devtools)
install_github('pander', 'Rapporter')
install.packages("pander")
# pander(texreg::screenreg(modelo1))
pander::pandoc.table(modelo1, style = "simple")
texreg::htmlreg(modelo1)
texreg::htmlreg(modelo1, star.symbol = "\\*", center = TRUE, doctype = FALSE,  html.tag = TRUE, head.tag = FALSE, body.tag = FALSE)
texreg::htmlreg(modelo2, star.symbol = "\\*", center = TRUE, doctype = FALSE,  html.tag = TRUE, head.tag = FALSE, body.tag = FALSE)
tsdiag(modelo2)
plot(ldeaths)
lines(fitted(modelo0),col="red")
lines(fitted(modelo1),col="blue")
lines(fitted(modelo2),col="darkgreen")
predict(modelo1,n.ahead = 12)
pander(predict(modelo1,n.ahead = 12))
kable(predict(modelo1,n.ahead = 12))
knitr::kable(predict(modelo1,n.ahead = 12))
# knitr::kable(predict(modelo1,n.ahead = 12))
dt <- predict(modelo1,n.ahead = 12)
dt %>%
knitr::kable() %>%
kableExtra::kable_styling()
predict(modelo1,n.ahead = 12)
predito1 <- predict(modelo1,n.ahead = 12)
names(predito1)
predito1 <- predict(modelo1,n.ahead = 12)
knitr::kable(list(predito1$pred, predito1$se))
predito1 <- predict(modelo1,n.ahead = 12)
# knitr::kable(list(predito1$pred, predito1$se))
pandoc.table(list(predito1$pred, predito1$se), style = "rmarkdown")
install.packages('pander')
install.packages("pander")
predito1 <- predict(modelo1,n.ahead = 12)
# knitr::kable(list(predito1$pred, predito1$se))
pander::pandoc.table(list(predito1$pred, predito1$se), style = "rmarkdown")
predito1 <- predict(modelo1,n.ahead = 12)
# knitr::kable(list(predito1$pred, predito1$se))
pander::pandoc.table(modelo1, style = "rmarkdown")
predito1 <- predict(modelo1,n.ahead = 12)
# knitr::kable(list(predito1$pred, predito1$se))
pander::pandoc.table(predict(modelo1,n.ahead = 12), style = "rmarkdown")
