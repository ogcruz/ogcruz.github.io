start(denguecasests)
end(denguecasests)
frequency(denguecasests)
max(denguecasests)
min(denguecasests)
mean(denguecasests)
median(denguecasests)
summary(denguecasests)
length(denguecasests)
start(denguecasests)
end(denguecasests)
frequency(denguecasests)
max(denguecasests)
min(denguecasests)
mean(denguecasests)
median(denguecasests)
summary(denguecasests)
length(denguecasests)
start(denguecasests)
end(denguecasests)
frequency(denguecasests)
denguecasests2 <- window(denguecasests, start=c(2010,1),end=c(2012,12),frequency=12)
plot(denguecasests2, ylab="Casos de Dengue", xlab="Tempo")
denguecasests2 <- window(denguecasests, start=c(2010,1),end=c(2012,12),frequency=12)
autoplot(denguecasests2, ylab="Casos de Dengue", xlab="Tempo")
#Convertendo os dados para o formato de Séries Temporais
#12 foi especificado pois queremos mostrar dos dados mensais
autoplot(denguecasests, ylab="Casos de Dengue", xlab="Tempo")
library(Kendall)
lines(lowess(time(denguecasests),denguecasests),lwd=3, col=2)
#Convertendo os dados para o formato de Séries Temporais
#12 foi especificado pois queremos mostrar dos dados mensais
plot(denguecasests, ylab="Casos de Dengue", xlab="Tempo")
library(Kendall)
lines(lowess(time(denguecasests),denguecasests),lwd=3, col=2)
library(ggfortify)
# Decomposição da Série Temporal
autoplot(decompose(denguecasests))
autoplot(denguecasests, ylab="Casos de Dengue", xlab="Tempo") + geom_smooth(method = "loess", size = 1.5))
#Convertendo os dados para o formato de Séries Temporais
#12 foi especificado pois queremos mostrar dos dados mensais
autoplot(denguecasests, ylab="Casos de Dengue", xlab="Tempo") + geom_smooth(method = "loess", size = 1.5)
ggplot(denguecasests) +
geom_point() +
geom_smooth(span = 0.3)
denguecasests
names(denguecasests)
#Convertendo os dados para o formato de Séries Temporais
#12 foi especificado pois queremos mostrar dos dados mensais
plot(denguecasests, ylab="Casos de Dengue", xlab="Tempo")
library(Kendall)
lines(lowess(time(denguecasests),denguecasests),lwd=3, col=2)
hist(denguecasests)
boxplot(denguecasests)
plot(aggregate(denguecasests, FUN=mean))
plot(aggregate(denguecasests, FUN=mean))
autoplot(aggregate(denguecasests, FUN=mean))
library(forecast)
library(ggplot2)
library(urca)
library(lmtest)
library(seasonal)
library(seasonalview)
# Uma serie temporal normalmente distribuida
myts = rnorm(60)
myts = ts(myts,start = c(2012,1), end=c(2016,12), frequency=12)
plot(myts)
# Para escolher o diretório
# tempts = read.csv(file.choose(), sep=",",header = F)
tempts = read.csv("~/Documentos/cursos_ecologicos_2019/dados/importar.csv", sep=",",header = F)
head(tempts)
tempts = ts(tempts[2],start = 1884, end=1939, frequency=1)
class(tempts)
plot(tempts)
qplot(denguecases, Month, Dengue_Cases, xlab = "", ylab = "")) +
geom_smooth(method = "loess", size = 1.5))
qplot(denguecases, Month, Dengue_Cases, xlab = "", ylab = "") +
geom_smooth(method = "loess", size = 1.5))
qplot(denguecases, Month, Dengue_Cases, xlab = "", ylab = "") +
geom_smooth(method = "loess", size = 1.5)
names(denguecases)
qplot(denguecases, Month, Dengue_Cases, xlab = "", ylab = "") +
geom_smooth(method = "loess", size = 1.5)
qplot(data=denguecases, Month, Dengue_Cases, xlab = "", ylab = "") +
geom_smooth(method = "loess", size = 1.5)
#teste de estacionariedade
x = ur.kpss(AirPassengers)
print(x)
adf.test(denguecases)
install.packages("aTSA")
library(aTSA)
adf.test(denguecases)
install.packages("tseries")
library(tseries)
adf.test(denguecases)
library(tseries)
adf.test(denguecases$Dengue_Cases)
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/estacionaria1.png"))
library(tseries)
adf.test(denguecases$Dengue_Cases)
kpss.test(denguecases$Dengue_Cases)
library(knitr)
library(pander)
library(forecast)
# Preparando o banco de incidencia de dengue
dengue_original=read.csv("dados/denguecases.csv")
# Preparando o banco de incidencia de dengue
dengue_original=read.csv("dados/denguecases.csv")
library(knitr)
library(pander)
library(forecast)
# Preparando o banco de incidencia de dengue
dengue_original=read.csv("~/Documentos/cursos_ecologicos_2019/dados/denguecases.csv")
denguecases=aggregate(Dengue_Cases~Month+Year,dengue_original,sum)
denguecasests=ts(denguecases$Dengue_Cases,start=c(2008,1),end=c(2016,12),frequency=12)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
library(knitr)
library(pander)
library(forecast)
library(ggplot2)
# Preparando o banco de incidencia de dengue
dengue_original=read.csv("~/Documentos/cursos_ecologicos_2019/dados/denguecases.csv")
denguecases=aggregate(Dengue_Cases~Month+Year,dengue_original,sum)
denguecasests=ts(denguecases$Dengue_Cases,start=c(2008,1),end=c(2016,12),frequency=12)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
plot(Seatbelts)
autoplot(Seatbelts)
plot(Seatbelts)
modelo1 = tslm(DriversKilled ~ trend, data=Seatbelts)
modelo2 = tslm(DriversKilled ~ season, data=Seatbelts)
modelo3 = tslm(DriversKilled ~ trend + season, data=Seatbelts)
CV(modelo1)
CV(modelo2)
CV(modelo3)
kable(CV(modelo1))
kable(CV(modelo2))
kable(CV(modelo3))
kable(round(CV(modelo1),2))
kable(round(CV(modelo2),2))
kable(round(CV(modelo3),2))
modelo1 = tslm(DriversKilled ~ trend, data=Seatbelts)
modelo2 = tslm(DriversKilled ~ season, data=Seatbelts)
modelo3 = tslm(DriversKilled ~ trend + season, data=Seatbelts)
#comparando textual
round(CV(modelo1),2) <- m1
round(CV(modelo1),2)
#comparando textual
m1 <- round(CV(modelo1),2)
m2 <- round(CV(modelo2),2)
m3 <- round(CV(modelo3),2)
tab <- data.frame(m1,m2,m3)
kable(tab)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
CV(modelo1)
CV(modelo2)
CV(modelo3)
# install tidyquant
install.packages('tidyquant', repos = "http://cran.us.r-project.org")
library(tidyquant)
#Load the function to the local through Paul Bleicher's GitHub page
source("https://raw.githubusercontent.com/iascchen/VisHealth/master/R/calendarHeat.R")
amznStock = as.data.frame(tidyquant::tq_get(c("AMZN"),get="stock.prices")) # get data using tidyquant
amznStock = amznStock[year(amznStock$date) > 2012, ] # Using data only after 2012Using ggplot2
View(amznStock)
library(plyr)
library(plotly)
amznStock$weekday = as.POSIXlt(amznStock$date)$wday #finding the day no. of the week
amznStock$weekdayf<-factor(amznStock$weekday,levels=rev(1:7),labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),ordered=TRUE) #converting the day no. to factor
amznStock$monthf<-factor(month(amznStock$date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
amznStock$yearmonth<- factor(as.yearmon(amznStock$date)) #finding the year and the month from the date. Eg: Nov 2018
amznStock$week <- as.numeric(format(amznStock$date,"%W")) #finding the week of the year for each date
amznStock<-ddply(amznStock,.(yearmonth),transform,monthweek=1+week-min(week)) #normalizing the week to start at 1 for every month
p <- ggplot(amznStock, aes(monthweek, weekdayf, fill = amznStock$adjusted)) + geom_tile(colour = "white") + facet_grid(year(amznStock$date)~monthf) + scale_fill_gradient(low="red", high="green") + xlab("Week of Month") + ylab("") + ggtitle("Time-Series Calendar Heatmap: AMZN Stock Prices") + labs(fill = "Price")
p
amznStock = as.data.frame(tidyquant::tq_get(c("AMZN"),get="stock.prices")) # get data using tidyquant
amznStock = amznStock[year(amznStock$date) > 2012, ] # Using data only after 2012Using ggplot2
amznStock$weekday = as.POSIXlt(amznStock$date)$wday #finding the day no. of the week
View(amznStock)
amznStock$weekdayf<-factor(amznStock$weekday,levels=rev(1:7),labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),ordered=TRUE) #converting the day no. to factor
View(amznStock)
amznStock$monthf<-factor(month(amznStock$date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
amznStock$yearmonth<- factor(as.yearmon(amznStock$date)) #finding the year and the month from the date. Eg: Nov 2018
amznStock$week <- as.numeric(format(amznStock$date,"%W")) #finding the week of the year for each date
amznStock<-ddply(amznStock,.(yearmonth),transform,monthweek=1+week-min(week)) #normalizing the week to start at 1 for every month
p <- ggplot(amznStock, aes(monthweek, weekdayf, fill = amznStock$adjusted)) + geom_tile(colour = "white") + facet_grid(year(amznStock$date)~monthf) + scale_fill_gradient(low="red", high="green") + xlab("Week of Month") + ylab("") + ggtitle("Time-Series Calendar Heatmap: AMZN Stock Prices") + labs(fill = "Price")
p
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pp0.jpg"))
install.packages("bib2df")
library(bib2df)
path <- system.file("extdata", "LiteratureOnCommonKnowledgeInGameTheory.bib", package = "bib2df")
path <- system.file("epidemiology", "LiteratureOnCommonKnowledgeInGameTheory.bib", package = "bib2df")
df <- bib2df(path)
path <- system.file("epidemiology", "LiteratureOnCommonKnowledgeInGameTheory.bib", package = "bib2df")
df <- bib2df(path)
df
path <- system.file("extdata", "LiteratureOnCommonKnowledgeInGameTheory.bib", package = "bib2df")
df <- bib2df(path)
df
View(df)
install.packages("bibtex")
library(bibtex)
df <- read.bib("/home/wagner/Downloads/top.bib", package = "bibtex")
View(df)
df <- bib2df(df)
df[1]
df[2]
df
path <- system.file("extdata", "LiteratureOnCommonKnowledgeInGameTheory.bib", package = "bib2df")
df <- read.bib("/home/wagner/Downloads/top.bib", package = "bibtex")
df <- bib2df(path)
df
path <- system.file("extdata", "/home/wagner/Downloads/top.bib", package = "bib2df")
df <- bib2df(path)
install.packages(c("tm", "XML", "RISmed"))
#### TM em Big Data
library("tm")
library("XML")
library("RISmed")
# buscando PALAVRA no titulo ou no MESH
res <- EUtilsSummary('("big data"[TIAB] AND "epidemiology") OR ("big data"[TIAB] AND "public health")')
summary(res)
fetch <- EUtilsGet(res)
id <- PMID(fetch)
autors <- Author(fetch)
ano <- YearPubmed(fetch)
tit <- ArticleTitle(fetch)
revista <- Title(fetch)
lingua <- Language(fetch)
keywords <-  Descriptor(fetch)
qualify <- QualifierName(fetch)
mesh <- Mesh(fetch)
tipo <- PublicationType(fetch)
tipo <- (tolower(tipo))
abst <- AbstractText(fetch)
link_artigo <- ELocationID(fetch)
myBib <- "/home/wagner/Downloads/top.bib"
df_orig <- bib2df(myBib)
head(df_orig)
journal_names <- unique(df_orig$JOURNAL)
head(journal_names)
install.packages("Rcmdr")
install.packages("readstata13")
library(Rcmdr)
devtools::install_github("sjewo/readstata13", ref="0.9.2")
install.packages("readstata13")
devtools::install_github("sjewo/readstata13", ref="testing")
install.packages("Rcmdr")
install.packages("RcmdrMisc")
install.packages("RcmdrMisc")
library(Rcmdr)
install.packages("addinslist")
install.packages("additivityTests")
esquisse:::esquisser()
CRANsearcher:::CRANsearcher()
addinslist:::addinslistAddin()
bookdown:::serve_book()
install.packages("RefManageR")
library(forecast)
library(ggplot2)
library(urca)
library(lmtest)
library(seasonal)
library(seasonalview)
# Uma serie temporal normalmente distribuida
myts = rnorm(60)
myts = ts(myts,start = c(2012,1), end=c(2016,12), frequency=12)
plot(myts)
library(RefManager)
library(RefManagerR)
install.packages("RefManageR")
file <- system.file("Bib", "/home/wagner/Downloads/biblatexExamples.bib", package = "RefManageR")
bib <- ReadBib(file, check = "error")
bib <- ReadBib(file, check = "error")
library(RefManagerR)
library(RefManageR)
bib <- ReadBib(file, check = "error")
bib <- read.bib(file, check = "error")
install.packages("bibtex")
library(bibtex)
bib <- ReadBib(file, check = "error")
library(bib2df)
bib <- ReadBib(file, check = "error")
bib <- ReadBib(file)
rjc.pm <- ReadPubMed("raymond j. carroll", database = "PubMed")
rjc.pm[[1L]]
rjc.pm
ReadPubMed("journal of statistical software", field = "journal", retmax = 1, mindate = 2009, maxdate = 2009)
rjc.pm2 <- ReadPubMed("journal of statistical software", field = "journal", retmax = 1, mindate = 2009, maxdate = 2009)
rjc.pm2
rjc.pm <- ReadPubMed("tassinari", database = "PubMed")
rjc.pm <- ReadPubMed("tassinari", database = "PubMed")
View(rjc.pm)
rjc.pm[[1L]]
rjc.pm
GetPubMedRelated(rjc.pm, batch.mode = TRUE, max.results = 1)
teste <- GetPubMedRelated(rjc.pm, batch.mode = TRUE, max.results = 1)
teste
library("spatstat")
install.packages("spatstat")
library("spatstat")
par(mfrow=c(1, 3))
plot(rpoispp(50), main="Aleatório")
plot(rMatClust(5, 0.05, 10), main="Cluster")
plot(rMaternII(200,0.1), main="Regular")
par(mfrow=c(1,1))
library("spatstat")
aleatorio <- rpoispp(50)
cluster <- rMatClust(5, 0.05, 10)
regular <- rMaternII(200,0.1)
par(mfrow=c(1, 3))
plot(aleatorio, main="Aleatório")
plot(rMatClust(5, 0.05, 10), main="Cluster")
plot(rMaternII(200,0.1), main="Regular")
Q <- quadratcount(aleatorio, nx = 4, ny = 4)
plot(Q)
Q <- quadratcount(aleatorio, nx = 4, ny = 4)
plot(Q)
plot(aleatorio, add = TRUE)
install.packages("spatstat")
install.packages("spatstat")
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pontos0.jpg"))
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pontos0.jpg"))
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pontos2019.jpg"))
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pp2.jpg"))
knitr::include_graphics("~/Documentos/cursos_ecologicos_2019/figuras/pontos1.jpg")
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pp0.jpg"))
library("spatstat")
aleatorio <- rpoispp(50)
agregado <- rMatClust(5, 0.05, 10)
regular <- rMaternII(200,0.1)
par(mfrow=c(1, 3))
plot(aleatorio, main="Aleatório")
plot(agregado, main="Agregado")
plot(regular, main="Regular")
aleatorioQ <- quadratcount(aleatorio, nx = 4, ny = 4)
regularQ <- quadratcount(regular, nx = 4, ny = 4)
agregadoQ <- quadratcount(agregado, nx = 4, ny = 4)
par(mfrow=c(1, 3))
plot(aleatorioQ, main="Aleatório")
plot(aleatorio, add = TRUE)
plot(regularQ, main="Regular")
plot(regular, add = TRUE)
plot(agregadoQ, main="Agregado")
plot(agregado, add = TRUE)
aleatorioK <- Kest(aleatorio)
agregadoK <- Kest(agregado)
regularK <- Kest(regular)
par(mfrow=c(1, 3))
plot(aleatorioK, main="Aleatório")
plot(agregadoK, main="Agregado")
plot(regularK, main="Regular")
aleatorioK <- Kest(aleatorio)
agregadoK <- Kest(agregado)
regularK <- Kest(regular)
par(mfrow=c(1, 3))
plot(aleatorioK, main="Aleatório")
plot(regularK, main="Regular")
plot(agregadoK, main="Agregado")
plot(aleatorioK, legend=FALSE, main="Aleatório")
plot(aleatorioK, main="Aleatório")
plot(aleatorioK, correction="isotropic", main="Aleatório")
library("spatstat")
aleatorio <- rpoispp(50)
regular <- rMaternII(200,0.1)
agregado <- rMatClust(5, 0.05, 10)
par(mfrow=c(1, 3))
plot(aleatorio, main="Aleatório")
plot(regular, main="Regular")
plot(agregado, main="Agregado")
plot(density(agregado, sigma = 600))
par(mfrow=c(1, 3))
plot(density(aleatorio, sigma = 50))
plot(density(regular, sigma = 50))
plot(density(agregado, sigma = 50))
par(mfrow=c(1, 3))
plot(density(aleatorio, sigma = 4))
plot(density(regular, sigma = 4))
plot(density(agregado, sigma = 4))
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.15))
plot(density(regular, bw = 0.15))
plot(density(agregado, bw = 0.15))
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1))
plot(density(regular, bw = 0.1))
plot(density(agregado, bw = 0.1))
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1))
plot(aleatorio, add = TRUE)
plot(density(regular, bw = 0.1))
plot(regular, add = TRUE)
plot(density(agregado, bw = 0.1))
plot(agregado, add = TRUE)
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1), main="Aleatório")
plot(aleatorio, add = TRUE)
plot(density(regular, bw = 0.1), main="Regular")
plot(regular, add = TRUE)
plot(density(agregado, bw = 0.1), main="Agragado")
plot(agregado, add = TRUE)
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1), main="Aleatório")
plot(aleatorio, add = TRUE)
plot(density(regular, bw = 0.1), main="Regular")
plot(regular, add = TRUE)
plot(density(agregado, bw = 0.1), main="Agregado")
plot(agregado, add = TRUE)
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pp3.jpg", "~/Documentos/cursos_ecologicos_2019/figuras/pp5.jpg"))
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1, kernel = c("gaussian")) , main="Gaussiano")
plot(aleatorio, add = TRUE)
plot(density(aleatorio, bw = 0.1, kernel = c("rectangular")), main="Retangular")
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1, kernel = c("gaussian")) , main="Gaussiano")
plot(aleatorio, add = TRUE)
plot(density(aleatorio, bw = 0.1, kernel = c("rectangular")), main="Retangular")
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1, kernel = c("gaussian")) , main="Gaussiano")
plot(aleatorio, add = TRUE)
plot(density(aleatorio, bw = 0.1, kernel = c("rectangular")), main="Rectangular")
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1, kernel = c("gaussian")) , main="Gaussiano")
plot(aleatorio, add = TRUE)
plot(density(aleatorio, bw = 0.1, kernel = c("quartic")), main="Retangular")
plot(aleatorio, add = TRUE)
plot(density(aleatorio, bw = 0.1, kernel = c("disc")), main="triangular")
plot(aleatorio, add = TRUE)
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/ripley.png"))
library("spatstat")
aleatorio <- rpoispp(50)
regular <- rMaternII(200,0.1)
agregado <- rMatClust(5, 0.05, 10)
par(mfrow=c(1, 3))
plot(aleatorio, main="Aleatório")
plot(regular, main="Regular")
plot(agregado, main="Agregado")
par(mfrow=c(1, 3))
plot(density(aleatorio, bw = 0.1), main="Aleatório")
plot(aleatorio, add = TRUE)
plot(density(regular, bw = 0.1), main="Regular")
plot(regular, add = TRUE)
plot(density(agregado, bw = 0.1), main="Agregado")
plot(agregado, add = TRUE)
aleatorioQ <- quadratcount(aleatorio, nx = 4, ny = 4)
regularQ <- quadratcount(regular, nx = 4, ny = 4)
agregadoQ <- quadratcount(agregado, nx = 4, ny = 4)
par(mfrow=c(1, 3))
plot(aleatorioQ, main="Aleatório")
plot(aleatorio, add = TRUE)
plot(regularQ, main="Regular")
plot(regular, add = TRUE)
plot(agregadoQ, main="Agregado")
plot(agregado, add = TRUE)
aleatorioK <- Kest(aleatorio)
agregadoK <- Kest(agregado)
regularK <- Kest(regular)
par(mfrow=c(1, 3))
plot(aleatorioK,main="Aleatório")
plot(regularK, main="Regular")
plot(agregadoK, main="Agregado")
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/ripley.png"))
knitr::include_graphics(c("~/Documentos/cursos_ecologicos_2019/figuras/pp3.jpg", "~/Documentos/cursos_ecologicos_2019/figuras/pp5.jpg"))
Gest(aleatorio)
plot(Gest(aleatorio))
plot(Gest(aleatorio))
plot(Gest(aleatorio), cbind(km,theo) ~ theo)
plot(envelope(Gest(aleatorio), cbind(km,theo) ~ theo))
par(mfrow=c(1, 3))
plot(Gest(aleatorio),main="Aleatório")
plot(Gest(regular), main="Regular")
plot(Gest(aagregadoK), main="Agregado")
par(mfrow=c(1, 3))
plot(Gest(aleatorio),main="Aleatório")
plot(Gest(regular), main="Regular")
plot(Gest(aagregado), main="Agregado")
par(mfrow=c(1, 3))
plot(Gest(aleatorio),main="Aleatório")
plot(Gest(regular), main="Regular")
plot(Gest(agregado), main="Agregado")
Gest(aleatorio)
install.packages("spatstat")
